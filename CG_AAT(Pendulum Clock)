#include<GL/glut.h>


int bob = 0.0, string_angle = 0.0, min_angle = 135.0;
int state = 1; // right

void init()
{
	glClearColor(0, 0, 0, 0.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// main clock
	glColor3f(1, 1, 1);
	glPushMatrix();
	glutSolidTorus(0.2, 2, 10, 20);
	glPopMatrix();


	// clock hands (hour hand and minute hand)
	glPushMatrix();
	glColor3f(1, 0, 0);
	glLineWidth(6);
	glRotatef((GLfloat)min_angle, 0, 0, 1);
	glTranslatef(0, 0, 0);
	glutWireSphere(1.8, 1, 20);
	glPopMatrix();

	// hour hand
	glPushMatrix();
	glColor3f(0, 1, 0);
	glRotatef(135, 0, 0, 1);
	glTranslatef(0, 0, 0);
	glutWireSphere(1.2, 1, 20);
	glPopMatrix();

	glPushMatrix();
	glRotatef((GLfloat)string_angle, 0, 0, 1);
	// pendulum string

	glPushMatrix();
	glRotatef(90, 0, 0, 1);
	glTranslatef(-5.4, 0, 0);
	glLineWidth(10);
	glutWireSphere(3.5, 1, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1, 0, 0);
	//glRotatef((GLfloat)bob, 1.0, 0.0, 1.0);
	glTranslatef(0, -6.0, 0.0);
	glutSolidSphere(0.8, 20, 30);
	glPopMatrix();

	glPopMatrix();
	glutSwapBuffers();
}


void reshape(int w, int h)
{
	GLfloat aspect = (GLfloat)w / (GLfloat)h;

	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	if (w <= h)
		glOrtho(-10, 10, -10 * aspect, 10 * aspect, -20, 20);
	else
		glOrtho(-10 * aspect, 10 * aspect, -10, 10, -20, 20);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

}

void timer(int)
{
	glutPostRedisplay();

	if (state)
	{
		if (string_angle < 30)
			string_angle += 1;
		else
			state = 0;
	}
	else
	{
		if (string_angle > -30)
			string_angle -= 1;
		else
			state = 1;
	}

	min_angle += 1;

	glutTimerFunc(1000 / 60, timer, 0);

}

const GLfloat light_ambient[] = { 0.0f, 0.0f, 0.0f, 1.0f };
const GLfloat light_diffuse[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_position[] = { -2.0f, 3.0f, 3.0f, 0.0f };

const GLfloat mat_ambient[] = { 0.7f, 0.7f, 0.7f, 1.0f };
const GLfloat mat_diffuse[] = { 0.8f, 0.8f, 0.8f, 1.0f };
const GLfloat mat_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat high_shininess[] = { 100.0f };


int main(int argc, char **argv)
{
	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
	glutInitWindowPosition(100, 100);
	glutInitWindowSize(600, 500);
	glutCreateWindow(" Nish");
	init();

	glutDisplayFunc(display);
	glutReshapeFunc(reshape);

	//glutKeyboardFunc(keyboard);
	glutTimerFunc(0, timer, 0);
	//glutIdleFunc(spin);

	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LESS);

	glEnable(GL_LIGHT0);
	glEnable(GL_NORMALIZE);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_LIGHTING);

	glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);

	glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);

	glutMainLoop();
	return 0;
}
